{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Example site to create your own mkdocs site with the material theme. second line for test. ...</p>"},{"location":"coding/readme/","title":"JavaScript","text":""},{"location":"coding/readme/#this-is-my-example-training","title":"This is my example training","text":""},{"location":"powercli/readme/","title":"Power Shell Command Assist","text":""},{"location":"powercli/readme/#connecting-to-vcenter","title":"Connecting to vCenter","text":"<pre><code>Connect-VIserver rangevcenter.cnd.ca.gov\n</code></pre>"},{"location":"powercli/readme/#storing-credentials-using-powershell-secretmanagement-module","title":"Storing Credentials using PowerShell SecretManagement Module","text":"<p>PowerShell\u2019s SecretManagement and SecretStore modules are robust options for securely storing and retrieving secrets.  </p> <pre><code>Install-Module Microsoft.PowerShell.SecretManagement\nInstall-Module Microsoft.PowerShell.SecretStore\n</code></pre>"},{"location":"powercli/readme/#register-a-new-secretstore-vault-and-add-your-credentials","title":"Register a new SecretStore vault and add your credentials","text":"<pre><code>Register-SecretVault -Name \"MySecretVault\" -ModuleName Microsoft.PowerShell.SecretStore -Description \"My Secure Vault\"\nSet-Secret -Name \"vCenterCred\" -Secret (Get-Credential)\n</code></pre>"},{"location":"powercli/readme/#retrieve-the-credentials-in-powercli","title":"Retrieve the credentials in PowerCLI","text":"<pre><code>$cred = Get-Secret -Name \"vCenterCred\" -AsPlainText\nConnect-VIServer -Server \"rangevcenter.cnd.ca.gov\" -Credential $cred\n</code></pre>"},{"location":"powercli/readme/#retrieving-credentials-from-powershell-secretstore","title":"Retrieving Credentials from PowerShell SecretStore","text":"<pre><code>$range = 'rangevcenter.cnd.ca.gov'\n$cred = Get-Secret -Name \"vCenterCred\" -AsPlainText\nSet-Alias -Name cv -Value Connect-VIServer\nSet-Alias -Name dv -Value Disconnect-VIServer\n</code></pre>"},{"location":"powercli/readme/#vcenter-connect-using-powershell-stored-credentials","title":"vCenter Connect using PowerShell Stored Credentials","text":"<pre><code>cv $range -Credential $cred\n</code></pre>"},{"location":"powercli/readme/#list-vms-from-a-specific-team","title":"List VMs from a specific team","text":"<pre><code>Get-VM -Name Team01-*\n</code></pre>"},{"location":"powercli/readme/#list-dc-vms-from-a-specific-team-or-all-dcs","title":"List DC VMs from a specific team or all DCs","text":"<p><pre><code>Get-VM -Name Team01-DC*\n</code></pre> or <pre><code>Get-VM -Name *DC*\n</code></pre></p>"},{"location":"powercli/readme/#list-team01-workstation-numbered-01-09","title":"List Team01 workstation numbered 01-09","text":"<pre><code>Get-VM -Name Team01-WK0[1-9]\n</code></pre>"},{"location":"powercli/readme/#list-team01-systems-and-assign-tags","title":"List Team01 Systems and assign tags","text":"<pre><code>Get-VM -Name Team01-* | New-TagAssignment -Tag \"Team01\"\n</code></pre>"},{"location":"powercli/readme/#list-multiple-systems-using-regex","title":"List Multiple systems using regex","text":"<pre><code>Get-VM | Where-Object { $_.Name -match 'Team0[6-9].*' -or $_.Name -match 'Team10.*' }\n</code></pre>"},{"location":"powercli/readme/#list-all-vms-in-a-specific-folder","title":"List all VMs in a specific folder","text":"<pre><code>Get-Folder \"Internet\" | Get-VM\n</code></pre>"},{"location":"powercli/readme/#update-vmtools","title":"Update VMTools","text":"<pre><code>Get-VM -Name Team15-WK* | Update-Tools\n</code></pre>"},{"location":"powercli/readme/#upgrade-vm-hardware-by-listing-vms-in-a-specific-folder","title":"Upgrade VM Hardware by listing VMs in a specific folder","text":"<pre><code>Get-Folder \"Internet\" | Get-VM | ForEach-Object { $_.ExtensionData.UpgradeVM('vmx-21') }\n</code></pre>"},{"location":"powercli/readme/#upgrade-vm-hardware-by-listing-vms-with-a-specific-name","title":"Upgrade VM Hardware by listing VMs with a specific name","text":"<pre><code>Get-VM Team03-* | ForEach-Object { $_.ExtensionData.UpgradeVM('vmx-21') }\n</code></pre>"},{"location":"powercli/readme/#start-vms","title":"Start VMs","text":"<pre><code>Get-VM -Name Team01-WK0[1-9] | Start-VM\n</code></pre>"},{"location":"powercli/readme/#shutdown-vms-gracefully","title":"Shutdown VMs Gracefully","text":"<pre><code>Get-VM -Name Team01-WK0[1-9] | Shutdown-VMGuest -Confirm:$false\n</code></pre>"},{"location":"powercli/readme/#restart-vms","title":"Restart VMs","text":"<pre><code>Get-VM -Name Team01-WK0[1-9] | Restart-VM\n</code></pre>"},{"location":"powercli/readme/#restart-vms-with-a-delay","title":"Restart VMs with a delay","text":"<pre><code>Get-VM -Name Team14-WK* | ForEach-Object { Restart-VM -VM $_ -Confirm:$false; Start-Sleep -Seconds 5 }\n</code></pre>"},{"location":"powercli/readme/#restart-vms-with-a-delay_1","title":"Restart VMs with a delay","text":"<pre><code># Get the VMs matching the specified name pattern\n$vms = Get-VM | Where-Object { $_.Name -match '(Team0[1-9]-WK.*|Team1[0-4]-WK.*)' }\n\n# Loop through the VMs and reboot them with a 5-second delay between each\nforeach ($vm in $vms) {\n    Restart-VM -VM $vm -Confirm:$false\n    Start-Sleep -Seconds 8\n}\n</code></pre>"},{"location":"powercli/readme/#restart-all-powered-on-wk-vms-with-specific-exclusions","title":"Restart all powered on WK VMs with specific exclusions","text":"<pre><code>Get-VM | where{$_.PowerState -eq 'PoweredOn' -and $_.Name -match 'Team.*-WK.*' -and $_.Name -notmatch 'WK13'} | ForEach-Object { Restart-VM -VM $_ -Confirm:$false; Start-Sleep -Seconds 5 }\n</code></pre>"},{"location":"powercli/readme/#remove-vms","title":"Remove VMs","text":"<pre><code>Get-VM -Name Team01-WK0[1-9] | Remove-VM -DeletePermanently -Confirm:$false\n</code></pre>"},{"location":"powercli/readme/#list-all-windows-vm-ipv4-addresses","title":"List all Windows VM IPv4 addresses","text":"<pre><code>Get-VM team07-* | Where-Object { $_.PowerState -eq 'PoweredOn' -and $_.Guest.OSFullName -match 'Windows' } | Sort-Object Name | Select-Object Name, @{ Name=\"IP Address\"; Expression={ ($_.Guest.IPAddress | Where-Object { $_ -match '^\\d{1,3}(\\.\\d{1,3}){3}$' }) -join '|' } }\n</code></pre>"},{"location":"powercli/readme/#list-all-the-windows-vm-names-with-ipv4-10x-addresses","title":"List all the Windows VM Names with IPv4 10.x addresses","text":"<pre><code>Get-VM team07-* | Where-Object { $_.PowerState -eq 'PoweredOn' -and $_.Guest.OSFullName -match 'Windows' } | Sort-Object Name | Select-Object Name, @{ Name=\"IP Address\"; Expression={ ($_.Guest.IPAddress | Where-Object { $_ -match '^10\\.' }) -join '|' } }\n</code></pre>"},{"location":"powercli/readme/#list-all-windows-vm-with-just-ipv4-10x-addresses","title":"List all Windows VM with just IPv4 10.x addresses","text":"<pre><code>Get-VM team07-* | Where-Object { $_.PowerState -eq 'PoweredOn' -and $_.Guest.OSFullName -match 'Windows' } | ForEach-Object { ($_.Guest.IPAddress | Where-Object { $_ -match '^10\\.' }) -join '|' }\n</code></pre>"},{"location":"powercli/readme/#list-all-vms-that-are-powered-off-and-exclude-others-by-name","title":"List all VMs that are powered off and exclude others by name","text":"<pre><code>get-vm team03-* | where{$_.PowerState -eq 'PoweredOff' -and $_.Name -notmatch 'SO'}\n</code></pre>"},{"location":"powercli/readme/#move-vms-different-folder","title":"Move VMs different folder","text":"<pre><code>get-vm Team01-* | move-VM -InventoryLocation ConsoleAccess01\n</code></pre>"},{"location":"powercli/readme/#list-vms-with-corresponding-datastore","title":"List VMs with corresponding datastore","text":"<pre><code>Get-VM Team01-* | Select-Object Name,@{N=\"Datastore\";E={[string]::Join(',',(Get-Datastore -Id $_.DatastoreIdList | Select -ExpandProperty Name))}}\n</code></pre>"},{"location":"powercli/readme/#move-vms-to-a-different-datastore","title":"Move VMs to a different datastore","text":"<pre><code>Get-VM -Name \"Team15*\" | Move-VM -Datastore \"RangeST01Volume08\"\n</code></pre>"},{"location":"powercli/readme/#move-vms-to-a-different-host","title":"Move VMs to a different Host","text":"<pre><code>Get-VM -Name \"Team15*\" | Move-VM -Destination \"rangeesxi08.cnd.ca.gov\"\n</code></pre>"},{"location":"powercli/readme/#move-vms-to-a-different-host-and-datastore","title":"Move VMs to a different Host and datastore","text":"<pre><code>Move-VM -VM \"VMName\" -Destination \"rangeesxi08.cnd.ca.gov\" -Datastore \"RangeST01Volume08\"\n</code></pre>"},{"location":"powercli/readme/#running-commands-on-vmguest-systems","title":"Running Commands on VMGuest Systems","text":"<pre><code>Invoke-VMScript -VM $varNmapServer -ScriptText $varCMD -GuestUser $varGuestUser -GuestPassword $varGuestPassword -ScriptType Bash | Out-Null\n</code></pre>"},{"location":"powercli/readme/#create-snapshots-multiple-systems","title":"Create Snapshots Multiple Systems","text":"<pre><code>Get-VM -Name Team01-* | New-Snapshot -Name nameofsnapshot\n</code></pre>"},{"location":"powercli/readme/#restore-snapshots-multiple-systems","title":"Restore Snapshots Multiple Systems","text":"<pre><code>$varVMs = Get-VM -Name Team01-TL0[1-2]\nForeach ($varVM in $varVMs) {\n    Set-VM -VM $varVM -SnapShot ExerciseBaseLine -Confirm:$false  -RunAsync | Out-Null\n}\n</code></pre>"},{"location":"powercli/readme/#remove-all-snapshots-on-multiple-systems","title":"Remove all Snapshots on Multiple Systems","text":"<pre><code>Get-VM -Name Team01-* | Get-Snapshot | Remove-Snapshot -Confirm:$false  -RunAsync\n</code></pre>"},{"location":"powercli/readme/#change-cpumemory","title":"Change CPU/Memory","text":"<pre><code>get-vm -name Team*-EX01 | set-vm -NumCpu 4 -MemoryGB 8 -Confirm:$false\n</code></pre>"},{"location":"powercli/readme/#create-vms-in-the-same-enclave-from-template","title":"Create VMs in the same enclave from template","text":"<p>The script tends to generate a lot of errors, but it does not prevent the script from running.  The variables in the script should be self explanatory, or explained below.  Ensure you save the script to disk before running.  It tended to generate a bunch of errors or failed if I did not save it.  </p> <ul> <li>Network Name Variable  </li> <li>Team_XX_RangeJumpBoxes - This network will have internet access while you build the VM.  This network is external and has no access to the range.  </li> <li>Team_XX_ZoneX_ZoneName - Range only Networks should be self explanatory.  Ultimately, it does not matter what network, each one has DHCP and will route traffic appropriately.  See Range Enclave Spreadsheet for a list of all networks.  Ranges 10-20 have DHCP enabled.  </li> </ul> <p>change $num to be the starting and ending number for how many VMs are wanted.  It will also be part of the VM name. e.g. Team01-WK01, Team01-WK02  <code>$num = 1 ; $num -le 3</code> </p> <pre><code># This is the Range Team number, e.g. Team01, Team02, Team03.  It also determines what folder the VMs will be created in.  e.g. TeamXX_Range\n$varRangeTeamNumber = \"11\"\n# This is the machine type, e.g. WK, DC, FS\n$varVMRole = \"WK\"\n# This is the template name\n$varVMTemplate = \"Win10_2004_Commando_Template_v2\"\n# This is the folder that the VM will be placed in.  It will be placed in the folder based on the team number  \n$varRangeFolder = \"Team\" + $varRangeTeamNumber + \"_Range\"\n# This is the Network PortGroup that will be assigned for network access\n$varNetworkName = \"Team_11_RangeJumpBoxes\"\n\nfor ($num = 1 ; $num -le 3 ; $num++) {\n    # this will get the datastore with the most space\n    $varDataStore = (Get-Datastore | Where-Object {$_.Name -like \"RangePureStorage*\"} | Sort-Object -Property FreeSpaceMB -Descending | Select-Object -First 1)\n    # Set the VM name\n    $varVMName = (\"Team\" + $varRangeTeamNumber + \"-\" + $varVMRole + \"$($num.ToString(\"00\"))\")\n    New-VM -Template $varVMTemplate -Name $varVMName -VMHost rangeesxi08.cnd.ca.gov -Datastore $varDataStore -Location $varRangeFolder -NetworkName $varNetworkName | Out-Null\n}\n</code></pre>"},{"location":"powercli/readme/#create-multiple-vms-across-enclaves-from-template","title":"Create multiple VMs across enclaves from template","text":"<pre><code># This is the Range Team number, e.g. Team01, Team02, Team03.  It also determines what folder the VMs will be created in.  e.g. TeamXX_Range\n[int]$StartRangeNumber = \"20\"\n[int]$EndRangeNumber = \"20\"\n# This is the machine type, e.g. WK, DC, FS\n$varVMRole = \"PAN1\"\n# This is the template name\n$varVMTemplate = \"PAN_Template_11.02\"\n\n\nfor($i=$StartRangeNumber;$i -le $EndRangeNumber;$i++) {\n    # this will get the datastore with the most space\n    $varDataStore = (Get-Datastore | Where-Object {$_.Name -like \"*RangeST*\"} | Sort-Object -Property FreeSpaceMB -Descending | Select-Object -First 1)\n    # Set the VM name\n    #$varVMName = (\"Team\" + $varRangeTeamNumber + \"_\" + $varVMRole)\n    New-VM -Template $varVMTemplate -Name \"Team$($i.ToString('00'))_$varVMRole\" -VMHost rangeesxi08.cnd.ca.gov -Datastore $varDataStore -Location \"Team$($i.ToString('00'))_Range\" | Out-Null\n    # Get the name of the new system\n    $varVM = Get-VM -Name \"Team$($i.ToString('00'))_$varVMRole\"\n    write-host $varVM\n    $varNA = ($varVM | Get-NetworkAdapter)\n    $varPG1 = Get-VDPortgroup -Name (\"Team$($i.ToString('00'))_RangeJumpBoxes\")\n    $varPG2 = Get-VDPortgroup -Name (\"Team$($i.ToString('00'))_Zone0_DMZ\")\n    $varPG3 = Get-VDPortgroup -Name (\"Team$($i.ToString('00'))_Zone1_Servers\")\n    $varPG4 = Get-VDPortgroup -Name (\"Team$($i.ToString('00'))_Zone2_Clients-1\")\n    $varPG5 = Get-VDPortgroup -Name (\"Team$($i.ToString('00'))_Zone3_Clients-2\")\n    $varPG6 = Get-VDPortgroup -Name (\"Team$($i.ToString('00'))_Zone4_ICS-1\")\n    $varPG7 = Get-VDPortgroup -Name (\"Team$($i.ToString('00'))_Zone5_ICS-2\")\n    $varPG8 = Get-VDPortgroup -Name (\"Team$($i.ToString('00'))_Zone6_Landing\")\n    $varPG9 = Get-VDPortgroup -Name \"Internet\"\n    Set-NetworkAdapter -NetworkAdapter $varNA[0] -Portgroup $varPG1 -Confirm:$false\n    Set-NetworkAdapter -NetworkAdapter $varNA[1] -Portgroup $varPG2 -Confirm:$false\n    Set-NetworkAdapter -NetworkAdapter $varNA[2] -Portgroup $varPG3 -Confirm:$false\n    Set-NetworkAdapter -NetworkAdapter $varNA[3] -Portgroup $varPG4 -Confirm:$false\n    Set-NetworkAdapter -NetworkAdapter $varNA[4] -Portgroup $varPG5 -Confirm:$false\n    Set-NetworkAdapter -NetworkAdapter $varNA[5] -Portgroup $varPG6 -Confirm:$false\n    Set-NetworkAdapter -NetworkAdapter $varNA[6] -Portgroup $varPG7 -Confirm:$false\n    Set-NetworkAdapter -NetworkAdapter $varNA[7] -Portgroup $varPG8 -Confirm:$false\n    Set-NetworkAdapter -NetworkAdapter $varNA[8] -Portgroup $varPG9 -Confirm:$false\n}\n</code></pre>"},{"location":"powercli/readme/#create-multiple-vms-in-the-same-enclave","title":"Create multiple VMs in the same enclave","text":"<p>This will generate VMs with the name Team18_JQR50,51.  The script generates errors, but still works.  </p> <p>Download Build-MultipleVMs.ps1 </p> <pre><code>.\\Build-MultipleVMs.ps1 -TeamNumber \"18\" -StartVMNumber \"50\" -EndVMNumber \"51\" -VMRole \"JQR\" -VMTemplate \"CPT171_Team18_JQR_student_template_v2ubuntu_24.04\" -PortGroupZone \"RangeJumpBoxes\"\n</code></pre>"},{"location":"powercli/readme/#run-invoke-script-on-multiple-systems","title":"Run Invoke-Script on multiple systems","text":"<pre><code># This is the Range Team number, e.g. Team01, Team02, Team03.  \n# You can also use regex \"0[1-7]\"  \n$varRangeTeamNumber = \"06\"\n\n# This is the machine type, e.g. WK, DC, FS\n$varVMRole = \"TL\"\n\n# Guest VM administrative credentials\n$varGuestUser = \"admin account\"\n$varGuestPassword = \"admin password\"\n\n# Get all vms from the team number/role identified.  It is is wildcard search.  \n$varVMs = (Get-VM (\"Team\" + $varRangeTeamNumber + \"-\" + $varVMRole + \"*\"))\n\n$varCMD = @'\ncommands to run\n'@\n\nforeach ($varVM in $varVMs) {\nWrite-Host \"Running script on $varVM \" -ForeGroundColor Green\nInvoke-VMScript -VM $varVM -ScriptText $varCMD -GuestUser $varGuestUser -GuestPassword $varGuestPassword -ScriptType bat | Out-Null\n}\n</code></pre>"},{"location":"powercli/readme/#run-invoke-script-on-multiple-systems-and-replace-values","title":"Run Invoke-Script on multiple systems and replace values","text":"<pre><code># This is the Range Team number, e.g. Team01, Team02, Team03.  \n# You can also use regex \"0[1-7]\"  \n$varRangeTeamNumber = \"10\"\n\n# This is the machine type, e.g. WK, DC, FS\n$varVMRole = \"DC\"\n\n# Guest VM administrative credentials\n$varGuestUser = \"admin account\"\n$varGuestPassword = \"admin password\"\n\n# Get all vms from the team number/role identified.  It is is wildcard search.  \n$varVMs = (Get-VM (\"Team\" + $varRangeTeamNumber + \"-\" + $varVMRole + \"01\"))\n\n$varCMD = @'\n# Import required module\nImport-Module ActiveDirectory\n\n# Get all AD Users\n$users = Get-ADUser -Filter * -Properties HomeDirectory\n\nforeach ($user in $users)\n{\n    if ($user.HomeDirectory)\n    {\n        # Extract the folder name from the HomeDirectory path\n        $folderName = Split-Path -Leaf $user.HomeDirectory\n\n        # Create the directory on the remote server\n        $remotePath = \"\\\\Team#TEAMNUMBER#-FS01\\Home\\$folderName\"\n\n        if (!(Test-Path -Path $remotePath))\n        {\n            New-Item -ItemType Directory -Path $remotePath\n            Write-Output \"Created directory: $remotePath\"\n        }\n        else\n        {\n            Write-Output \"Directory already exists: $remotePath\"\n        }\n    }\n}\n'@\n$varCMD = $varCMD.Replace(\"#TEAMNUMBER#\", $varRangeTeamNumber)\nforeach ($varVM in $varVMs) {\nWrite-Host \"Running script on $varVM \" -ForeGroundColor Green\nInvoke-VMScript -VM $varVM -ScriptText $varCMD -GuestUser $varGuestUser -GuestPassword $varGuestPassword -ScriptType powershell | Out-Null\n}\n</code></pre>"},{"location":"powercli/readme/#enabledisable-vcenter-accounts","title":"Enable/Disable vCenter accounts","text":"<pre><code>Connect-SsoAdminServer -Server rangevcenter.cnd.ca.gov -User administrator@rangevsphere.local\n</code></pre> <ul> <li> <p>-Enable $false disables accounts, $true enables accounts <pre><code>Get-SsoPersonUser -Name blueteam* -Domain rangevsphere.local | Set-SsoPersonUser -Enable $true\n</code></pre></p> </li> <li> <p>Display current account status <pre><code>Get-SsoPersonUser -Name blueteam* -Domain rangevsphere.local\n</code></pre></p> </li> <li> <p>Only enable/disable Redteam account when prepping for Cyber Dawn <pre><code>Get-SsoPersonUser -Name redteam -Domain rangevsphere.local | Set-SsoPersonUser -Enable $false\n</code></pre></p> </li> <li> <p>Display current account status <pre><code>Get-SsoPersonUser -Name * -Domain rangevsphere.local\n</code></pre></p> </li> </ul>"},{"location":"printers/readme/","title":"Printers","text":""},{"location":"printers/readme/#this-is-my-example-training","title":"This is my example training","text":""},{"location":"troubleshooting/readme/","title":"Printer Troubleshooting","text":""},{"location":"troubleshooting/readme/#this-is-my-example-training","title":"This is my example training","text":""},{"location":"windows/readme/","title":"Windows","text":""},{"location":"windows/readme/#this-is-my-example-training","title":"This is my example training","text":""},{"location":"windows/azure/readme/","title":"Azure","text":""},{"location":"windows/azure/readme/#this-is-my-example-training","title":"This is my example training","text":""},{"location":"windows/sysmon/readme/","title":"SysMon","text":""},{"location":"windows/sysmon/readme/#this-is-my-example-training","title":"This is my example training","text":""}]}